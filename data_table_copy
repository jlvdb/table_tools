#!/usr/bin/env python3
import sys
import os
import argparse

from tools import load_table


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description='Create a copy of a data table allowing format '
                    'conversions, selection sub-sets of columns or renaming '
                    'columns.')
    parser.add_argument(
        '-i', '--input', required=True, help='file path of input data table')
    parser.add_argument(
        '--i-format', default='fits',
        help='astropy.table format specifier of the input table')
    parser.add_argument(
        '-c', '--copy', nargs='*',
        help='copy only these column to the output table '
             '(default: select all columns)')
    parser.add_argument(
        '-d', '--delete', nargs='*',
        help='columns to remove from the output table (default: remove none)')
    parser.add_argument(
        '-r', '--rename', nargs='*',
        help='previously selected columns to be renamed in the output table, '
             'format: [old name]:[new name]')
    parser.add_argument(
        '-o', '--output', required=True, help='file path of output table')
    parser.add_argument(
        '--o-format', default='fits',
        help='astropy.table format specifier of the output table '
             '(default: %(default)s)')
    args = parser.parse_args()

    # check which columns from the command arguments must exist in input table
    select_columns = []
    if args.copy is not None:
        select_columns.extend(args.copy)
    if args.rename is not None:
        for key in args.rename:
            old_key, new_key = key.split(":")
            # don't add this column to the list if it already exists
            if old_key not in select_columns:
                select_columns.append(old_key)
    if args.delete is not None:
        select_columns.extend(args.delete)

    table = load_table(args.input, args.i_format, select_columns)

    # select all columns if none were selected with --copy
    if args.copy is None:
        new_table = table
    else:
        new_table = table[select_columns]
    # changed the column names according to --rename
    if args.rename is not None:
        for keys in args.rename:
            old_key, new_key = keys.split(":")
            print("rename column '%s' to '%s'" % (old_key, new_key))
            new_table.rename_column(old_key, new_key)
    # remove the columns requested in --delete
    if args.delete is not None:
        new_table.remove_columns(args.delete)

    # write to specified output path
    print("write table to: %s" % args.output)
    new_table.write(args.output, format=args.o_format, overwrite=True)
