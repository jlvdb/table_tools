#!/usr/bin/env python3
import argparse
import os
import subprocess
import sys

from astropy.table import hstack
from tools import load_table, stilts_available


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description='Horizontally stack data tables.')
    parser.add_argument(
        '-i', '--input', nargs='*', required=True,
        help='file paths of input data tables, must have the same data format')
    parser.add_argument(
        '--i-format', default='fits',
        help='topcat-stilts (if available) format specifier of the input '
             'tables, otherwise astropy.table format specifier '
             '(default: %(default)s)')
    parser.add_argument(
        '--astropy', action='store_true', help='force using astropy.table')
    parser.add_argument(
        '-o', '--output', required=True, help='file path of output table')
    parser.add_argument(
        '--o-format', default='fits',
        help='topcat-stilts (if available) format specifier of the output '
             'table, otherwise astropy.table format specifier '
             '(default: %(default)s)')
    args = parser.parse_args()

    if args.astropy:
        stilts_command = ""
    else:
        stilts_command = stilts_available()

    # if STILTS is avialable, use tjoin to stack the tables
    if len(stilts_command) > 0:
        cmd = ["topcat", "-stilts", "tjoin", "nin=%d" % len(args.input)]
        # specify input paths and table formats
        for i, path in enumerate(args.input, 1):
            print("selected input table: %s" % path)
            cmd.append("in%d=%s" % (i, path))
            cmd.append("ifmt%d=%s" % (i, args.i_format))
        # specify output path and table formats
        cmd.append("ofmt=%s" % args.o_format)
        cmd.append("out=%s" % args.output)
        print("append the table data")
        print("write table to: %s" % args.output)
        subprocess.call(cmd)

    # use astropy.table.Table as fallback (slower)
    else:
        # load tables
        tables = []
        nrows = -1
        for path in args.input:
            tables.append(load_table(path, args.i_format))
            # check whether the number of rows match
            if nrows == -1:
                nrows = len(tables[-1])
            elif len(tables[-1]) != nrows:
                sys.exit(
                    "ERROR: Row count mismatch (%d != %d)" % (
                        len(tables[-1]), nrows))
        # append the tables
        print("append the table data")
        master_table = hstack(tables)
        # write to specified output path
        print("write table to: %s" % args.output)
        master_table.write(args.output, format=args.o_format, overwrite=True)
