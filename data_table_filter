#!/usr/bin/env python3
import os
import argparse
import numpy as np

from table_tools import load_table


# map input to logic function
operator_map = {
    "ll": np.less, "le": np.less_equal, "eq": np.equal,
    "ge": np.greater_equal, "gg": np.greater, "ne": np.not_equal}
operator_print = {
    "ll": "<", "le": "<=", "eq": "==",
    "ge": ">=", "gg": ">", "ne": "!="}
operator_help_string = (
    "filter rule to apply, format: [colname] [operator] [value], " +
    "[value] must be floating point, possible [operator]s are: " +
    ", ".join("%s (%s)" % (k, v) for k, v in operator_print.items()) + ". " +
    "If the argument is repeated, rules are joined with bit-wise AND (&)")


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description='Create a copy of a data table and a apply filtering '
                    'with simple boolean expressions.')
    parser.add_argument(
        '-i', '--input', required=True, help='file path of input data table')
    parser.add_argument(
        '--i-format', default='fits',
        help='astropy.table format specifier of input table')
    parser.add_argument(
        '-r', '--rule', nargs=3, required=True, action="append",
        help=operator_help_string)
    parser.add_argument(
        '-o', '--output', required=True, help='file path of output table')
    parser.add_argument(
        '--o-format', default='fits',
        help='astropy.table format specifier of the output table '
             '(default: %(default)s)')
    args = parser.parse_args()

    table = load_table(args.input, args.i_format, [r[0] for r in args.rule])

    # apply filter rule
    mask = np.ones(len(table), dtype="bool")  # select everything by default
    for rule in args.rule:
        column, operator, value = rule
        print("only keep entries with '%s' %s %s" % (
            column, operator_print[operator], str(value)))
        filter_data = table[column].data
        # select the correct boolean operator numpy ufunc
        operator_func = operator_map[operator]
        mask &= operator_func(filter_data, float(value))

    print("kept: %i of %i" % (np.count_nonzero(mask), len(table)))
    # remove masked objects
    table_masked = table[mask]

    # write to specified output path
    print("write filtered table to: %s" % args.output)
    table_masked.write(args.output, format=args.o_format, overwrite=True)
